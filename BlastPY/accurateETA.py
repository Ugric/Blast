# GENERATED BY BlastAI

# IMPORTS
import math


def accurateETA(timetaken, size, done, persecond):
    # INPUTS
    INPUTS = [
        timetaken, size, done, persecond  # CHANGE ME!
    ]

    # OUTPUTS
    OUTPUTS = [
        0  # DONT CHANGE ME!
    ]

    # ALGORITHM
    OUTPUTS[0] -= INPUTS[2]
    OUTPUTS[0] += INPUTS[1]
    if INPUTS[3] != 0:
        OUTPUTS[0] /= INPUTS[3]
    OUTPUTS[0] += 0.585541000004985
    OUTPUTS[0] = math.floor(OUTPUTS[0].real)
    OUTPUTS[0] += INPUTS[3]
    OUTPUTS[0] = round(OUTPUTS[0].real)
    OUTPUTS[0] -= INPUTS[3]
    OUTPUTS[0] -= 0.24541041669502373
    OUTPUTS[0] = round(OUTPUTS[0].real)
    INPUTS[3] = round(INPUTS[3].real)
    if INPUTS[2] == 1.102422481759568:
        INPUTS[2] = math.floor(INPUTS[2].real)
        if INPUTS[0] != 0:
            INPUTS[1] /= INPUTS[0]
        INPUTS[3] += INPUTS[1]
    else:
        INPUTS[3] /= 0.7057266915505227
        OUTPUTS[0] += 0.19400014292073053
        INPUTS[3] = round(INPUTS[3].real)
    if INPUTS[1] != 0:
        INPUTS[3] /= INPUTS[1]
    INPUTS[3] += INPUTS[3]
    INPUTS[3] += INPUTS[3]
    OUTPUTS[0] += INPUTS[3]
    if INPUTS[3] < INPUTS[3]:
        OUTPUTS[0] **= INPUTS[3]
    else:
        INPUTS[3] = round(INPUTS[3].real)
        if INPUTS[3] != INPUTS[2]:
            if INPUTS[0] >= INPUTS[3]:
                if INPUTS[2] > 0.5668621415599748:
                    INPUTS[1] = max([0, INPUTS[1].real])
                else:
                    INPUTS[3] -= INPUTS[3]
            else:
                INPUTS[3] *= 0.2869639078700845
                OUTPUTS[0] = max([0, OUTPUTS[0].real])
        else:
            INPUTS[3] = round(INPUTS[3].real)
    OUTPUTS[0] += INPUTS[3]
    if not INPUTS[0] <= INPUTS[1]:
        OUTPUTS[0] = round(OUTPUTS[0].real)
    INPUTS[0] *= INPUTS[1]
    if INPUTS[0] > INPUTS[1]:
        INPUTS[1] = round(INPUTS[1].real)
    else:
        if INPUTS[2] != 0:
            OUTPUTS[0] /= INPUTS[2]
        INPUTS[0] **= 0.436808810318154
        OUTPUTS[0] = math.floor(OUTPUTS[0].real)
        INPUTS[0] -= 0.4412687183894848
    if INPUTS[0] != 0:
        INPUTS[1] /= INPUTS[0]
    INPUTS[2] = math.ceil(INPUTS[2].real)
    INPUTS[3] -= 0.32861699027368885
    INPUTS[3] = math.floor(INPUTS[3].real)
    if INPUTS[2] != 0:
        INPUTS[3] /= INPUTS[2]
    INPUTS[1] -= INPUTS[1]
    INPUTS[3] += 0.004958578739745034
    OUTPUTS[0] -= INPUTS[3]

    # DONE!
    return max([0, OUTPUTS[0]])
